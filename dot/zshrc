# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"
export ZSH_CONFIG="$HOME/.zshrc"
export ZSH_CUSTOM="$ZSH/custom"
export ZSH_COMPDUMP="$ZSH_CACHE_DIR/.zcompdump-$SHORT_HOST-$ZSH_VERSION"
export DOTFILES="$HOME/.dotfiles"
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=8"

export MLH_AT_SYMBOL=" at "
export MLH_IN_SYMBOL=" in "
export MLH_ON_SYMBOL=" on "
export MLH_SHELL_SYMBOL="$ "

# GPG config (see https://help.github.com/en/github/authenticating-to-github/telling-git-about-your-signing-key)
export GPG_TTY=$(tty)

stty -echoctl

zstyle ':completion:*' matcher-list '' 'l:|=[^_]* r:|=*'

ZSH_THEME="mlh"

plugins=(
    git
    macos
    adb
    zsh-autosuggestions
    zsh-syntax-highlighting
    # zsh-completions # does not work, see https://github.com/zsh-users/zsh-completions/issues/603
)

# see https://github.com/zsh-users/zsh-completions/issues/603
fpath+="${ZSH_CUSTOM:-"$ZSH/custom"}/plugins/zsh-completions/src"


if [ -d "$ZSH" ]; then
    source "$ZSH/oh-my-zsh.sh"
fi

# Dart
export PATH="$HOME/.pub-cache/bin:$PATH"

# Flutter (from fvm)
export PATH="$HOME/fvm/default/bin:$PATH"

export MASON_CACHE="$HOME/.config/mason"
export MAESTRO_CACHE="$HOME/.config/maestro"

# Android

# see https://developer.android.com/studio/command-line/variables
export ANDROID_HOME="$HOME/androidsdk"
export ANDROID_USER_HOME="$HOME/.config/android"
# see https://developer.android.com/studio/command-line#tools-sdk
export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$PATH" 
# see https://developer.android.com/studio/command-line#tools-platform
export PATH="$ANDROID_HOME/platform-tools:$PATH"
# see https://developer.android.com/studio/command-line#tools-emulator
export PATH="$ANDROID_HOME/emulator:$PATH"

build_tools=$(
    command ls "$ANDROID_HOME/build-tools" \
        | sort --version-sort --reverse \
        | head -n 1
    )

export PATH="$ANDROID_HOME/build-tools/$build_tools:$PATH"

# Raspberry Pi Pico
export PICO_SDK_PATH="$HOME/pico-sdk"

# Java
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    # on Linux
    export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
    export PATH="$JAVA_HOME/bin:$PATH"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
    # on macOS
    export JAVA_HOME="/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home"
    export PATH="$JAVA_HOME/bin:$PATH"
fi

# dotnet
export PATH="/usr/local/share/dotnet/x64:$PATH"
export PATH="$HOME/.dotnet/tools:$PATH"

# make
export MAKEFLAGS="-j 8"

# avr-gcc
export PATH="/usr/local/opt/avr-gcc@11/bin:$PATH"

# Python poetry
export PATH="$HOME/.local/bin:$PATH"

# Check if pyenv is installed
if [ -d "$HOME/.pyenv" ]; then
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
fi
export PYTHONDONTWRITEBYTECODE=1

# Ruby

# Check if rbenv is installed
if [ -d "$HOME/.rbenv" ]; then
    export PATH="$HOME/.rbenv/bin:$PATH"
    eval "$(rbenv init -)"
fi

# Go

# when Go installed directly from the webpage (no thru the pkg manager)
export PATH="/usr/local/go/bin:$PATH"
# for "go install"-ed software
export PATH="$HOME/go/bin:$PATH"

# Rust
export PATH="$HOME/.cargo/bin:$PATH"

# shell-scripts (when not installed through brew)
if [ -d "$HOME/shell-scripts" ]; then
	export PATH="$HOME/shell-scripts/bin:$PATH"
fi


# nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# nvm (from Homebrew)
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# You may need to manually set your language environment
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='micro'
else
    export EDITOR='micro'
fi

# Heroku autocomplete setup
HEROKU_AC_ZSH_SETUP_PATH=~/Library/Caches/heroku/autocomplete/zsh_setup
if [ -f $HEROKU_AC_ZSH_SETUP_PATH ]; then
    source $HEROKU_AC_ZSH_SETUP_PATH;
fi

# Source local gitignored files (not tracked by git)
if [ -d $DOTFILES/local ]; then
    export PATH="$DOTFILES/local:$PATH"
fi

# fzf
if [ -f ~/.fzf.zsh ]; then
	source ~/.fzf.zsh
fi

# bat
export BAT_CONFIG_PATH="$HOME/.bat.conf"
alias batt="bat --theme=\$(defaults read -globalDomain AppleInterfaceStyle &> /dev/null && echo default || echo GitHub)"

# colorize man pages using bat
export MANPAGER="sh -c 'col -bx | bat -l man -p'"

# make less don't clutter ~
export LESSHISTFILE="$HOME/.config/less/history"
