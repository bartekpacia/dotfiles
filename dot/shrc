#!/usr/bin/env sh
# cross-shell configuration

if [ -z "$INTELLIJ_ENVIRONMENT_READER" ]; then
	# Prevent "stty: stdin isn't a terminal" error when IntellJ loads shell variables.
	# See https://intellij.com/shell-env
	stty -echoctl
fi

export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
# [ ! -d "$XDG_CONFIG_HOME" ] && "$XDG_CACHE_HOME" # not sure...
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"
export DOTFILES="$HOME/.dotfiles"

if [ -x /opt/homebrew/bin/brew ]; then
	eval "$(/opt/homebrew/bin/brew shellenv)"
	export HOMEBREW_NO_ENV_HINTS=1
	export HOMEBREW_NO_AUTO_UPDATE=1
	export HOMEBREW_NO_INSTALL_CLEANUP=1
	export HOMEBREW_NO_EMOJI=1
fi

# GPG config (see https://help.github.com/en/github/authenticating-to-github/telling-git-about-your-signing-key)
export GPG_TTY="$(tty)"

# 1Password SSH agent config
# This points to a symlink. The real socket is in "~/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock"
# Create symlink with:
# ln -s ~/Library/Group\ Containers/2BUA8C4S2C.com.1password/t/agent.sock "$XDG_STATE_HOME/1password/agent.sock"
export SSH_AUTH_SOCK="$XDG_STATE_HOME/1password/agent.sock"

# 1Password shell plugins
if [ -f "$XDG_CONFIG_HOME/op/plugins.sh" ]; then
	. "$XDG_CONFIG_HOME/op/plugins.sh"
fi

# Dart
export PUB_CACHE="$XDG_CACHE_HOME/pub"
# see https://github.com/dart-lang/sdk/issues/42813#issuecomment-972120346
export ANALYZER_STATE_LOCATION_OVERRIDE="$XDG_STATE_HOME/dartServer"
export PATH="$PUB_CACHE/bin:$PATH" # executables installed with pub global

export PATH="$HOME/projects/starpls/editors/code/bin:$PATH"

# Flutter
export FVM_CACHE_PATH="$XDG_CACHE_HOME/fvm"
export FVM_GIT_CACHE_PATH="$XDG_CACHE_HOME/fvm"
export PATH="$FVM_CACHE_PATH/default/bin:$PATH" # installed with fvm
export PATH="$HOME/flutter/bin:$PATH"           # installed directly
# export PATROL_NO_COMPLETION=true
# alias flutter="flutter --no-version-check"

export PATH="$FVM_CACHE_PATH/default/engine/src/flutter/bin:$PATH" # For Flutter engine development (et - engine tool)
export PATH="$FVM_CACHE_PATH/default/engine/src/flutter/lib/web_ui/dev:$PATH" # For Flutter Web engine development
export DART_SDK_DIR="$FVM_CACHE_PATH/default" # Needed by felt for web engine development

# Android

# see https://developer.android.com/studio/command-line/variables
export ANDROID_HOME="$HOME/androidsdk"
export ANDROID_USER_HOME="$HOME/.android"
# see https://developer.android.com/studio/command-line#tools-sdk
export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$PATH"
# see https://developer.android.com/studio/command-line#tools-platform
export PATH="$ANDROID_HOME/platform-tools:$PATH"
# see https://developer.android.com/studio/command-line#tools-emulator
export PATH="$ANDROID_HOME/emulator:$PATH"

if [ -d "$ANDROID_HOME/build-tools" ]; then
	build_tools=$(
		command ls "$ANDROID_HOME/build-tools" |
			sort --version-sort --reverse |
			head -n 1
	)
	export PATH="$ANDROID_HOME/build-tools/$build_tools:$PATH"
fi

# Raspberry Pi Pico
export PICO_SDK_PATH="$HOME/pico-sdk"

# Java
if [ "$(uname)" = Linux ]; then
	# on Linux
	# Download: https://github.com/adoptium/temurin17-binaries/releases
	# Install: https://adoptium.net/en-GB/installation/archives
	# Look for "OpenJDK17U-jdk_x64_linux_hotspot_17.0.7_7.tar.gz"
	export JAVA_HOME="/usr/lib/jvm/temurin-17.jdk"
	export PATH="$JAVA_HOME/bin:$PATH"
elif [ "$(uname)" = Darwin ]; then
	# on macOS

	# OpenJDK
	# export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"
	#export JAVA_HOME="/Library/Java/JavaVirtualMachines/temurin-8.jdk/Contents/Home"
	#export JAVA_HOME="/Library/Java/JavaVirtualMachines/openjdk-11.jdk/Contents/Home"
	#export JAVA_HOME="/Library/Java/JavaVirtualMachines/openjdk-17.jdk/Contents/Home"
	#export JAVA_HOME="/Library/Java/JavaVirtualMachines/openjdk-21.jdk/Contents/Home"
	export JAVA_HOME="/Library/Java/JavaVirtualMachines/openjdk.jdk/Contents/Home"

	# Eclipse Temurin
	# export JAVA_HOME="/Library/Java/JavaVirtualMachines/temurin-21.jdk/Contents/Home"
	export PATH="$JAVA_HOME/bin:$PATH"
fi

# Docker
# export DOCKER_CONFIG="$XDG_CONFIG_HOME/docker" # Docker Desktop does not support this
export DOCKER_CLI_HINTS=false
# not needed anymore???
# export PATH="$HOME/.docker/bin:$PATH"

# Postgres
if [ -d "$(brew --prefix)/opt/libpq/bin" ]; then
	export PATH="$(brew --prefix)/opt/libpq/bin:$PATH"
fi

# Gradle
export GRADLE_USER_HOME="$XDG_CACHE_HOME/gradle"

# dotnet
export PATH="/usr/local/share/dotnet/x64:$PATH"
export PATH="$HOME/.dotnet/tools:$PATH"

# make
export MAKEFLAGS="-j 8"

# avr-gcc
export PATH="/usr/local/opt/avr-gcc@11/bin:$PATH"

# Maestro
export PATH="$PATH:$HOME/.maestro/bin"

# Python

# Export binaries from Poetry venvs
export VENV_PATH="$HOME/.venvs"
export PATH="$VENV_PATH/bin:$PATH"

# Check if pyenv is installed
export PYENV_ROOT="$XDG_CACHE_HOME/pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv >/dev/null 2>&1; then
	eval "$(pyenv init -)"
	mkdir -p "$XDG_CONFIG_HOME/ipython"
fi

export PYTHONDONTWRITEBYTECODE=1
export PYTHONUSERBASE="$XDG_CACHE_HOME/python"
export PYTHON_HISTORY="$XDG_STATE_HOME/python/history"
export JUPYTER_PLATFORM_DIRS=1
export MPLCONFIGDIR="$XDG_CONFIG_HOME/matplotlib"
export RUFF_CACHE_DIR="$XDG_CACHE_HOME/ruff"

# Kotlin
KONAN_DATA_DIR="$XDG_CACHE_HOME/konan"

# Ruby

# Check if rbenv is installed
export RBENV_ROOT="$XDG_CACHE_HOME/rbenv"
export PATH="$RBENV_ROOT/bin:$PATH"
if command -v rbenv >/dev/null 2>&1; then
	eval "$(rbenv init -)"
fi

export IRBRC="$XDG_CONFIG_HOME/irb/irbrc"
export BUNDLE_USER_CONFIG="$XDG_CONFIG_HOME/bundle"
export BUNDLE_USER_CACHE="$XDG_CACHE_HOME/bundle"

# Node.js
export NODE_REPL_HISTORY=""

# n
export N_PREFIX="$XDG_CACHE_HOME/n"
export PATH="$N_PREFIX/bin:$PATH"

# nvm
export NVM_DIR="$XDG_CACHE_HOME/nvm"
export PATH="$NVM_DIR/bin:$PATH"

# Source: https://github.com/npm/npm/issues/6675#issuecomment-251049832
export NPM_CONFIG_USERCONFIG="$XDG_CONFIG_HOME/npm/npmrc"
export NPM_CONFIG_CACHE="$XDG_CACHE_HOME/npm"
export NPM_CONFIG_TMP="$XDG_CACHE_HOME/npm"

# Go

# when Go installed directly from the webpage (no thru the pkg manager)
export PATH="/usr/local/go/bin:$PATH"
# for "go install"-ed software
export GOPATH="$XDG_CACHE_HOME/go"
export PATH="$GOPATH/bin:$PATH"

# Rust
export PATH="$HOME/.cargo/bin:$PATH"

# https://github.com/bartekpacia/scripts (when not installed through brew)
if [ -d "$HOME/scripts" ]; then
	export PATH="$HOME/scripts/bin:$PATH"
fi

# TealDeer (https://github.com/dbrgn/tealdeer/issues/311)
export TEALDEER_CONFIG_DIR="$XDG_CONFIG_HOME/tealdeer"

# Wolfram Mathematica
if [ "$(uname)" = Darwin ]; then
	export PATH="/Applications/Mathematica.app/Contents/MacOS:$PATH"
fi

# Add local gitignored files to PATH
if [ -d "$DOTFILES/local" ]; then
	export PATH="$DOTFILES/local:$PATH"
fi

# Explicitly force the only sensible language
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

export PAGER=less
export LESS="--RAW-CONTROL-CHARS --QUIET"

if [ -z "$INTELLIJ_ENVIRONMENT_READER" ]; then
	# Guard against old version of less not having "--no-vbell".
	# For some reason, this hangs forever when loaded from within IntelliJ.
	case "$(less --no-vbell 2>&1)" in
	*vbell*) ;;
	*) LESS="$LESS --no-vbell" ;;
	esac
fi

# should not be required since (see https://github.com/gwsw/less/blob/b1548ca1188aca424026103da8284d1db25150f6/NEWS#L321-L322)
export LESSHISTFILE="$XDG_STATE_HOME/less/history"

if command -v delta >/dev/null 2>&1; then
	export GIT_PAGER=delta

	if [ "$(uname)" = Darwin ]; then
		alias delta="delta --features \"\$(defaults read -globalDomain AppleInterfaceStyle &> /dev/null && echo dark-mode || echo light-mode)\""
		export GIT_PAGER="delta --features \"\$(defaults read -globalDomain AppleInterfaceStyle &> /dev/null && echo dark-mode || echo light-mode)\""
	fi
fi

# bat
if command -v bat >/dev/null 2>&1; then
	export BAT_CONFIG_PATH="$XDG_CONFIG_HOME/bat/bat.conf"

	if [ "$(uname)" = Darwin ]; then
		# automatically set light/dark theme on macOS
		alias bat="bat --theme=\"\$(defaults read -globalDomain AppleInterfaceStyle &> /dev/null && echo Monokai Extended Bright || echo Monokai Extended Light)\""
	fi
	# colorize man pages using bat
	export MANPAGER="sh -c 'col -bx | bat -l man -p'"
	# fix formatting problems (so far I experienced it only on ArchLinux)
	export MANROFFOPT="-c"
	# use bat for brew cat
	if command -v brew >/dev/null 2>&1; then
		export HOMEBREW_BAT=1
	fi
fi

# fzf
if command -v fzf >/dev/null 2>&1; then
	if command -v fd >/dev/null 2>&1; then
		export FZF_DEFAULT_COMMAND="fd --type f --hidden --exclude .git"
		export FZF_CTRL_T_COMMAND="fd --type f --hidden --exclude .git"
	fi

	if command -v bat >/dev/null 2>&1; then
		export FZF_CTRL_T_OPTS="--preview 'bat {}'"
	fi
	export FZF_DEFAULT_OPTS="--no-height"
fi

export EDITOR=nano
if command -v micro >/dev/null 2>&1; then
	export EDITOR=micro

	if [ "$(uname)" = Darwin ]; then
		# automatically set light/dark theme on macOS
		alias micro="micro -colorscheme=\$(defaults read -globalDomain AppleInterfaceStyle &> /dev/null && echo monokai || echo bubblegum)"
		export GIT_EDITOR="micro -colorscheme=\$(defaults read -globalDomain AppleInterfaceStyle &> /dev/null && echo monokai || echo bubblegum)"
	fi
fi

export WGETRC="$XDG_CONFIG_HOME/wget/wgetrc"
export CP_HOME_DIR="$XDG_CACHE_HOME/cocoapods" # make cocoapods not clutter ~
export MASON_CACHE="$XDG_CACHE_HOME/mason"     # make mason not clutter ~
export MAVEN_HOME="$XDG_CACHE_HOME/maven"      # make maven not clutter ~
