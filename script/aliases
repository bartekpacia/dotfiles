#!/usr/bin/env sh

alias cls="clear"
alias md="mkdir -p"

if command -v lsd 1>/dev/null 2>&1; then
	if [ "$(uname)" = Darwin ]; then
		alias lsd="lsd --color \"\$(defaults read -globalDomain AppleInterfaceStyle &> /dev/null && printf always || printf never)\""
	fi
	alias ll="lsd -lAhF"
	alias la="lsd -AhF"
	alias l="lsd -F"
else
	alias ll="ls -lAhF"
	alias la="ls -AhF"
	alias l="ls -F"
fi

alias sshlocal='ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o "LogLevel ERROR"'

# Check if main exists and use instead of master
# Copied from https://github.com/ohmyzsh/ohmyzsh/blob/0ffcc3b68a1196e9164ff42fac8a5fdd4804abd0/plugins/git/git.plugin.zsh#L34-L48
function git_main_branch() {
  command git rev-parse --git-dir &>/dev/null || return
  local ref
  for ref in refs/{heads,remotes/{origin,upstream}}/{main,trunk,mainline,default,stable,master}; do
    if command git show-ref -q --verify $ref; then
      echo ${ref:t}
      return 0
    fi
  done

  # If no main branch was found, fall back to master but return error
  echo master
  return 1
}

alias ec="echo"

alias g="git"
alias ga="git add"
alias gb="git branch"
alias gc="git commit"
alias gd="git diff"
alias gl="git log"
alias gp="git push"
alias gr="git remote"
alias gs="git status"
alias gst="git stash"
alias gt="git tag"
alias gaa="git add ."
alias gch="git checkout"
alias gcm='git checkout $(git_main_branch)'
alias gds="git diff --staged"
alias glo="git log --graph --oneline"
alias gpf="git push --force-with-lease"
alias gpl="git pull"
alias grs="git restore"
alias grst="git restore --staged"
alias grv="git remote --verbose"
alias gtv="git tag | sort -V"
alias gmnff="git merge --no-ff"
alias gpsup='git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)'

alias fl="flutter"

ggch() {
	if [ "$1" != "" ]; then
		git checkout "$1"
	else
		# https://www.reddit.com/r/commandline/comments/ne90tm/comment/gyf33ps
		git branch --sort=-committerdate  | grep -v "^\*" | fzf --reverse --info=inline | xargs git checkout
	fi
}

gprune() {
	git fetch --prune

	# 1. List all remote branches
	# 2. Filter out branches that exist on remote
	# 3. Remove the rest
	git branch --remotes \
		| awk '{print $1}' \
		| grep -E -v -f /dev/fd/0 <(git branch -vv | grep origin) \
		| awk '{print $1}' \
		| xargs git branch -D
}

alias lzd="lazydocker"
alias lzg="lazygit"

# ------ Sleep ------

if command -v pmset >/dev/null 2>&1; then
	alias zzz="pmset sleepnow"
	alias zzzz="pmset sleepnow"
elif command -v systemctl >/dev/null 2>&1; then
	alias zzz="systemctl sleep"
	alias zzzz="systemctl sleep"
fi

howexport() {
	echo 'while read -r line; do export "$line"; done < .env'
}

gh_link() {
	type="$1"
	number="$2"
	if [ -z "$type" ] || [ -z "$number" ]; then
		echo "Usage: ghprlink <issue|pr> <issue/PR number>"
		return 1
	fi

	if [ "$type" = "issue" ]; then
		echo "([#$number](https://github.com/mobile-dev-inc/maestro/issues/$number))"
	elif [ "$type" = "pr" ]; then
		echo "([#$number](https://github.com/mobile-dev-inc/maestro/pull/$number))"
	else
		echo "Invalid type. Please specify 'issue' or 'pr'."
	fi
}
