#!/bin/bash

# [get_golang.sh](https://gist.github.com/n8henrie/1043443463a4a511acf98aaa4f8f0f69)
# Download latest Golang release that matches the machines hardware architecture
# Example download URL: https://dl.google.com/go/go1.10.linux-amd64.tar.gz

set -euo pipefail
# Install pre-reqs
sudo apt-get install python3 git -y
o=$(python3 -c $'import os\nprint(os.get_blocking(0))\nos.set_blocking(0, True)')

ARCH=$(uname -m)

if [ "$ARCH" = "x86_64" ]; then
  ARCH=amd64
fi

#Download Latest Go
GOURLREGEX="https://dl.google.com/go/go[0-9\.]+\.linux-$ARCH).tar.gz"
echo "Finding latest version of Go for AMD64..."
url="$(wget -qO- https://golang.org/dl/ | grep -oP \"https:\/\/dl\.google\.com\/go\/go([0-9\.]+)\.linux-$ARCH\.tar\.gz\" | head -n 1 )"
latest="$(echo $url | grep -oP 'go[0-9\.]+' | grep -oP '[0-9\.]+' | head -c -2 )"
echo "Downloading latest Go for AMD64: ${latest}"
wget --quiet --continue --show-progress "${url}"
unset url
unset GOURLREGEX

# Remove Old Go
sudo rm -rf /usr/local/go

# Install new Go
sudo tar -C /usr/local -xzf go"${latest}".linux-amd64.tar.gz
echo "Create the skeleton for your local users go directory"
mkdir -p ~/go/{bin,pkg,src}
#echo "Setting up GOPATH"
#echo "export GOPATH=~/go" >> ~/.profile && source ~/.profile
#echo "Setting PATH to include golang binaries"
#echo "export PATH='$PATH':/usr/local/go/bin:$GOPATH/bin" >> ~/.profile && source ~/.profile

# Remove Download
rm go"${latest}".linux-$(ARCH).tar.gz

# Print Go Version
/usr/local/go/bin/go version
python3 -c $'import os\nos.set_blocking(0, '$o')'
